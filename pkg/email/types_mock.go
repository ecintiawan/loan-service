// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/email/types.go

// Package email is a generated GoMock package.
package email

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmail is a mock of Email interface.
type MockEmail struct {
	ctrl     *gomock.Controller
	recorder *MockEmailMockRecorder
}

// MockEmailMockRecorder is the mock recorder for MockEmail.
type MockEmailMockRecorder struct {
	mock *MockEmail
}

// NewMockEmail creates a new mock instance.
func NewMockEmail(ctrl *gomock.Controller) *MockEmail {
	mock := &MockEmail{ctrl: ctrl}
	mock.recorder = &MockEmailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmail) EXPECT() *MockEmailMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockEmail) Send(content EmailContent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEmailMockRecorder) Send(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmail)(nil).Send), content)
}
