// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/lock/types.go

// Package lock is a generated GoMock package.
package lock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLock is a mock of Lock interface.
type MockLock struct {
	ctrl     *gomock.Controller
	recorder *MockLockMockRecorder
}

// MockLockMockRecorder is the mock recorder for MockLock.
type MockLockMockRecorder struct {
	mock *MockLock
}

// NewMockLock creates a new mock instance.
func NewMockLock(ctrl *gomock.Controller) *MockLock {
	mock := &MockLock{ctrl: ctrl}
	mock.recorder = &MockLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLock) EXPECT() *MockLockMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLock) Lock(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock", key)
}

// Lock indicates an expected call of Lock.
func (mr *MockLockMockRecorder) Lock(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLock)(nil).Lock), key)
}

// Unlock mocks base method.
func (m *MockLock) Unlock(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock", key)
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockMockRecorder) Unlock(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLock)(nil).Unlock), key)
}
