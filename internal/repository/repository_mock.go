// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/ecintiawan/loan-service/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLoan is a mock of Loan interface.
type MockLoan struct {
	ctrl     *gomock.Controller
	recorder *MockLoanMockRecorder
}

// MockLoanMockRecorder is the mock recorder for MockLoan.
type MockLoanMockRecorder struct {
	mock *MockLoan
}

// NewMockLoan creates a new mock instance.
func NewMockLoan(ctrl *gomock.Controller) *MockLoan {
	mock := &MockLoan{ctrl: ctrl}
	mock.recorder = &MockLoanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoan) EXPECT() *MockLoanMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoan) Create(ctx context.Context, model *entity.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoanMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoan)(nil).Create), ctx, model)
}

// Get mocks base method.
func (m *MockLoan) Get(ctx context.Context, filter *entity.LoanFilter) (entity.LoanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].(entity.LoanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoanMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoan)(nil).Get), ctx, filter)
}

// GetDetail mocks base method.
func (m *MockLoan) GetDetail(ctx context.Context, id int64) (*entity.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, id)
	ret0, _ := ret[0].(*entity.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockLoanMockRecorder) GetDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockLoan)(nil).GetDetail), ctx, id)
}

// Update mocks base method.
func (m *MockLoan) Update(ctx context.Context, model *entity.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLoanMockRecorder) Update(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoan)(nil).Update), ctx, model)
}

// MockInvestment is a mock of Investment interface.
type MockInvestment struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentMockRecorder
}

// MockInvestmentMockRecorder is the mock recorder for MockInvestment.
type MockInvestmentMockRecorder struct {
	mock *MockInvestment
}

// NewMockInvestment creates a new mock instance.
func NewMockInvestment(ctrl *gomock.Controller) *MockInvestment {
	mock := &MockInvestment{ctrl: ctrl}
	mock.recorder = &MockInvestmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestment) EXPECT() *MockInvestmentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInvestment) Create(ctx context.Context, model *entity.Investment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInvestmentMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInvestment)(nil).Create), ctx, model)
}

// Get mocks base method.
func (m *MockInvestment) Get(ctx context.Context, filter *entity.InvestmentFilter) (entity.InvestmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].(entity.InvestmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvestmentMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvestment)(nil).Get), ctx, filter)
}

// GetAmountSum mocks base method.
func (m *MockInvestment) GetAmountSum(ctx context.Context, filter *entity.InvestmentFilter) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmountSum", ctx, filter)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmountSum indicates an expected call of GetAmountSum.
func (mr *MockInvestmentMockRecorder) GetAmountSum(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmountSum", reflect.TypeOf((*MockInvestment)(nil).GetAmountSum), ctx, filter)
}

// MockInvestor is a mock of Investor interface.
type MockInvestor struct {
	ctrl     *gomock.Controller
	recorder *MockInvestorMockRecorder
}

// MockInvestorMockRecorder is the mock recorder for MockInvestor.
type MockInvestorMockRecorder struct {
	mock *MockInvestor
}

// NewMockInvestor creates a new mock instance.
func NewMockInvestor(ctrl *gomock.Controller) *MockInvestor {
	mock := &MockInvestor{ctrl: ctrl}
	mock.recorder = &MockInvestorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestor) EXPECT() *MockInvestorMockRecorder {
	return m.recorder
}

// GetDetail mocks base method.
func (m *MockInvestor) GetDetail(ctx context.Context, id int64) (*entity.Investor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, id)
	ret0, _ := ret[0].(*entity.Investor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockInvestorMockRecorder) GetDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockInvestor)(nil).GetDetail), ctx, id)
}

// MockUpload is a mock of Upload interface.
type MockUpload struct {
	ctrl     *gomock.Controller
	recorder *MockUploadMockRecorder
}

// MockUploadMockRecorder is the mock recorder for MockUpload.
type MockUploadMockRecorder struct {
	mock *MockUpload
}

// NewMockUpload creates a new mock instance.
func NewMockUpload(ctrl *gomock.Controller) *MockUpload {
	mock := &MockUpload{ctrl: ctrl}
	mock.recorder = &MockUploadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpload) EXPECT() *MockUploadMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockUpload) Upload(ctx context.Context, model *entity.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, model)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockUploadMockRecorder) Upload(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUpload)(nil).Upload), ctx, model)
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotifier) Notify(ctx context.Context, model *entity.Notifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), ctx, model)
}
