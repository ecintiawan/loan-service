// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	entity "github.com/ecintiawan/loan-service/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLoan is a mock of Loan interface.
type MockLoan struct {
	ctrl     *gomock.Controller
	recorder *MockLoanMockRecorder
}

// MockLoanMockRecorder is the mock recorder for MockLoan.
type MockLoanMockRecorder struct {
	mock *MockLoan
}

// NewMockLoan creates a new mock instance.
func NewMockLoan(ctrl *gomock.Controller) *MockLoan {
	mock := &MockLoan{ctrl: ctrl}
	mock.recorder = &MockLoanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoan) EXPECT() *MockLoanMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoan) Create(ctx context.Context, model *entity.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoanMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoan)(nil).Create), ctx, model)
}

// Get mocks base method.
func (m *MockLoan) Get(ctx context.Context, filter *entity.LoanFilter) (entity.LoanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].(entity.LoanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLoanMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoan)(nil).Get), ctx, filter)
}

// Proceed mocks base method.
func (m *MockLoan) Proceed(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proceed", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Proceed indicates an expected call of Proceed.
func (mr *MockLoanMockRecorder) Proceed(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proceed", reflect.TypeOf((*MockLoan)(nil).Proceed), ctx, req)
}

// MockLoanState is a mock of LoanState interface.
type MockLoanState struct {
	ctrl     *gomock.Controller
	recorder *MockLoanStateMockRecorder
}

// MockLoanStateMockRecorder is the mock recorder for MockLoanState.
type MockLoanStateMockRecorder struct {
	mock *MockLoanState
}

// NewMockLoanState creates a new mock instance.
func NewMockLoanState(ctrl *gomock.Controller) *MockLoanState {
	mock := &MockLoanState{ctrl: ctrl}
	mock.recorder = &MockLoanStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanState) EXPECT() *MockLoanStateMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockLoanState) Approve(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockLoanStateMockRecorder) Approve(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockLoanState)(nil).Approve), ctx, req)
}

// Disburse mocks base method.
func (m *MockLoanState) Disburse(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disburse", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disburse indicates an expected call of Disburse.
func (mr *MockLoanStateMockRecorder) Disburse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disburse", reflect.TypeOf((*MockLoanState)(nil).Disburse), ctx, req)
}

// Invest mocks base method.
func (m *MockLoanState) Invest(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invest indicates an expected call of Invest.
func (mr *MockLoanStateMockRecorder) Invest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invest", reflect.TypeOf((*MockLoanState)(nil).Invest), ctx, req)
}

// MockLoanAction is a mock of LoanAction interface.
type MockLoanAction struct {
	ctrl     *gomock.Controller
	recorder *MockLoanActionMockRecorder
}

// MockLoanActionMockRecorder is the mock recorder for MockLoanAction.
type MockLoanActionMockRecorder struct {
	mock *MockLoanAction
}

// NewMockLoanAction creates a new mock instance.
func NewMockLoanAction(ctrl *gomock.Controller) *MockLoanAction {
	mock := &MockLoanAction{ctrl: ctrl}
	mock.recorder = &MockLoanActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanAction) EXPECT() *MockLoanActionMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockLoanAction) Approve(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Approve indicates an expected call of Approve.
func (mr *MockLoanActionMockRecorder) Approve(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockLoanAction)(nil).Approve), ctx, req)
}

// Disburse mocks base method.
func (m *MockLoanAction) Disburse(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disburse", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disburse indicates an expected call of Disburse.
func (mr *MockLoanActionMockRecorder) Disburse(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disburse", reflect.TypeOf((*MockLoanAction)(nil).Disburse), ctx, req)
}

// Invest mocks base method.
func (m *MockLoanAction) Invest(ctx context.Context, req *entity.LoanProceed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invest indicates an expected call of Invest.
func (mr *MockLoanActionMockRecorder) Invest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invest", reflect.TypeOf((*MockLoanAction)(nil).Invest), ctx, req)
}

// MockInvestment is a mock of Investment interface.
type MockInvestment struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentMockRecorder
}

// MockInvestmentMockRecorder is the mock recorder for MockInvestment.
type MockInvestmentMockRecorder struct {
	mock *MockInvestment
}

// NewMockInvestment creates a new mock instance.
func NewMockInvestment(ctrl *gomock.Controller) *MockInvestment {
	mock := &MockInvestment{ctrl: ctrl}
	mock.recorder = &MockInvestmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestment) EXPECT() *MockInvestmentMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInvestment) Get(ctx context.Context, filter *entity.InvestmentFilter) (entity.InvestmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].(entity.InvestmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvestmentMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvestment)(nil).Get), ctx, filter)
}

// Invest mocks base method.
func (m *MockInvestment) Invest(ctx context.Context, req *entity.Investment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invest indicates an expected call of Invest.
func (mr *MockInvestmentMockRecorder) Invest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invest", reflect.TypeOf((*MockInvestment)(nil).Invest), ctx, req)
}
